// Code generated by MockGen. DO NOT EDIT.
// Source: fs.go
//
// Generated by this command:
//
//	mockgen -source fs.go -destination fs_mock.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFsRepositoryInterface is a mock of FsRepositoryInterface interface.
type MockFsRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFsRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockFsRepositoryInterfaceMockRecorder is the mock recorder for MockFsRepositoryInterface.
type MockFsRepositoryInterfaceMockRecorder struct {
	mock *MockFsRepositoryInterface
}

// NewMockFsRepositoryInterface creates a new mock instance.
func NewMockFsRepositoryInterface(ctrl *gomock.Controller) *MockFsRepositoryInterface {
	mock := &MockFsRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockFsRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFsRepositoryInterface) EXPECT() *MockFsRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Ext mocks base method.
func (m *MockFsRepositoryInterface) Ext(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ext", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Ext indicates an expected call of Ext.
func (mr *MockFsRepositoryInterfaceMockRecorder) Ext(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ext", reflect.TypeOf((*MockFsRepositoryInterface)(nil).Ext), path)
}

// IsDir mocks base method.
func (m *MockFsRepositoryInterface) IsDir(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDir indicates an expected call of IsDir.
func (mr *MockFsRepositoryInterfaceMockRecorder) IsDir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MockFsRepositoryInterface)(nil).IsDir), path)
}

// IsExist mocks base method.
func (m *MockFsRepositoryInterface) IsExist(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockFsRepositoryInterfaceMockRecorder) IsExist(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockFsRepositoryInterface)(nil).IsExist), path)
}

// Read mocks base method.
func (m *MockFsRepositoryInterface) Read(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFsRepositoryInterfaceMockRecorder) Read(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFsRepositoryInterface)(nil).Read), path)
}

// WorkDir mocks base method.
func (m *MockFsRepositoryInterface) WorkDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkDir indicates an expected call of WorkDir.
func (mr *MockFsRepositoryInterfaceMockRecorder) WorkDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkDir", reflect.TypeOf((*MockFsRepositoryInterface)(nil).WorkDir))
}
