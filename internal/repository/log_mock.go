// Code generated by MockGen. DO NOT EDIT.
// Source: log.go
//
// Generated by this command:
//
//	mockgen -source log.go -destination log_mock.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogRepositoryInterface is a mock of LogRepositoryInterface interface.
type MockLogRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLogRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockLogRepositoryInterfaceMockRecorder is the mock recorder for MockLogRepositoryInterface.
type MockLogRepositoryInterfaceMockRecorder struct {
	mock *MockLogRepositoryInterface
}

// NewMockLogRepositoryInterface creates a new mock instance.
func NewMockLogRepositoryInterface(ctrl *gomock.Controller) *MockLogRepositoryInterface {
	mock := &MockLogRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockLogRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogRepositoryInterface) EXPECT() *MockLogRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Ask mocks base method.
func (m *MockLogRepositoryInterface) Ask(message, defaultValue string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ask", message, defaultValue)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ask indicates an expected call of Ask.
func (mr *MockLogRepositoryInterfaceMockRecorder) Ask(message, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ask", reflect.TypeOf((*MockLogRepositoryInterface)(nil).Ask), message, defaultValue)
}

// Confirm mocks base method.
func (m *MockLogRepositoryInterface) Confirm(message string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", message)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm.
func (mr *MockLogRepositoryInterfaceMockRecorder) Confirm(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockLogRepositoryInterface)(nil).Confirm), message)
}

// Fatal mocks base method.
func (m *MockLogRepositoryInterface) Fatal(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatal", err)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLogRepositoryInterfaceMockRecorder) Fatal(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogRepositoryInterface)(nil).Fatal), err)
}

// Info mocks base method.
func (m *MockLogRepositoryInterface) Info(format string, v ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLogRepositoryInterfaceMockRecorder) Info(format any, v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogRepositoryInterface)(nil).Info), varargs...)
}
